#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
from luban.content import select
from luban.content import load
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from opal.components.Actor import Actor as base

# Hardcoded value id=1 for pw (electron) simulation
JOB_ID_DOS=3

# Variable that should be set in envs.sh
EXPORT_ROOT = os.environ.get('EXPORT_ROOT')

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id')
        config  = pyre.inventory.str(name="config", default="")

    def default(self, director):
        page = director.retrieveVisual('template')
        page.maindoc.add(self.content(director))

        return page

    def link(self, director, document=None):
        return select(id='maindoc').replaceContent(self.content(director))

    def content(self, director):
        document = Document(title='Electron Configuration')
        form = document.form()

        job = director.clerk.getJob(self.inventory.id)
        
        p = Paragraph()
        p.text = [job.config]
        form.add(p)

        submit = form.submitbutton(label="Run Simulation")

        # action when form is submitted
        form.onsubmit = select(element=form).submit(
            actor   = 'electronsconfig',
            routine = 'runSimulation',
            id=self.inventory.id
            )

        return document
        
    def runSimulation(self, director):

        self.runPWSimulation(director)
        self.runPW_DOS(director)
        self.createPWPlot(director)

        # Redirection
        return load(actor='electronsjobs', routine='link', id=self.inventory.id)

    # Sets pseudo_dir and outdir (hardcoded) and saves to the same file.
    def setPWConfig(self, filename=None, config=None):
        from vinil.utils.qeconfig import QEConfig
        qe = QEConfig(filename, config)
        qe.parse()
        pd = qe.namelist('control')

        pseudo_dir  = EXPORT_ROOT + "/content/data/"
        outdir      = EXPORT_ROOT + "/content/temp/"
        pd.editParam('pseudo_dir', "'%s'" % pseudo_dir)
        pd.editParam('outdir',     "'%s'" % outdir)
        
        if filename is not None:
            qe.save()
            return
        
        if config is not None:
            return qe.toString()

    def setPW_DOSConfig(self, filename=None, config=None):
        from vinil.utils.qeconfig import QEConfig
        qe = QEConfig(filename, config)
        qe.parse()
        pd = qe.namelist('inputpp')

        outdir      = EXPORT_ROOT + "/content/temp/"
        fildos      = EXPORT_ROOT + "/output/ni.scf.dos.out"

        pd.editParam('outdir', "'%s'" % outdir)
        pd.editParam('fildos', "'%s'" % fildos)

        if filename is not None:
            qe.save()
            return

        if config is not None:
            return qe.toString()


    # Run PW simulation
    def runPWSimulation(self, director):
        job = director.clerk.getJob(self.inventory.id)
        config = job.config

        #infile  = EXPORT_ROOT + "/content/data/ni.scf.in" # Uses database
        outfile = EXPORT_ROOT + "/output/ni.scf.out"

        from vinil.utils import pw
        configmod = self.setPWConfig(config=config)
        pw.runPWSimulation(outfile, config=configmod)

    # Find electron DOS
    def runPW_DOS(self, director):
        job = director.clerk.getJob(JOB_ID_DOS)
        config = job.config

        #infile  = EXPORT_ROOT + "/content/data/ni.scf.dos.in" # Uses database

        configmod = self.setPW_DOSConfig(config=config)
        from vinil.utils import dos
        dos.runPW_DOS(config=configmod)

    # Plot electron DOS
    def createPWPlot(self, director):
        infile      = EXPORT_ROOT + "/output/ni.scf.dos.out"
        imagefile   = EXPORT_ROOT + "/html/images/plots/ni_scf_dos.png"

        from vinil.utils import plot
        plot.createPWPlot(infile, imagefile)

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.config     = self.inventory.config
        return

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('electronsconfig')

__date__ = "$Aug 5, 2009 11:03:42 AM$"


