#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.Plot2D import Plot2D

# Variable that should be set in envs.sh
EXPORT_ROOT = os.environ.get('EXPORT_ROOT')


from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id')


    def content(self, director):
        document = Document(title='Jobs')

        document.add(self.getPWPlot(director))

#        headers = ["Name", "Type", "Description", "Formula", "Created"]
#
#        # Sample data for Favorites
#        names   = ['MgB2_SP', 'MgB2_E', 'MgB2_MP']
#        columns = [['Single-Phonon', 'Single-Phonon simualtion', 'MgB2', '25-09-2009'],
#                   ['Total Energy', 'Electron simualtion', 'MgB2', '26-09-2009'],
#                   ['Multi-Phonon', 'Multy-Phonon simualtion', 'MgB2', '27-09-2009'],
#                    ]
#
#        #document.add(Paragraph(text="Jobs", Class="header-h2"))
#        document.add(tableController(headers))
#        document.add(tableSimulations(names, columns))

        #self.runSimulation(director)

        return document


        # Running jobs
    def linkRunning(self, director, document=None):
        actions = []
        actions.append(select(id='maindoc').replaceContent(self.contentRunning(director)))
        actions.append(select(id='path-content').replaceContent(self.pathRunning()))

        return actions

    def contentRunning(self, director):
        document = Document(title='Running Jobs')
        p = Paragraph()
        p.text = ["""Table of running jobs """]
        document.add(p)

        return document

    def pathRunning(self):
        list = [["Home","greet","link"],
                ["Jobs", "jobs", "link"],
                ["Running", None, None]]

        from vinil.utils.pathbuilder import PathBuilder
        pb = PathBuilder(list)
        return pb.buildPath()

    # Finished jobs
    def linkFinished(self, director, document=None):
        actions = []
        actions.append(select(id='maindoc').replaceContent(self.contentFinished(director)))
        actions.append(select(id='path-content').replaceContent(self.pathFinished()))

        return actions

    def contentFinished(self, director):
        document = Document(title='Finished Jobs')
        p = Paragraph()
        p.text = ["""Table of finished jobs """]
        document.add(p)

        return document

    def pathFinished(self):
        list = [["Home","greet","link"],
                ["Jobs", "jobs", "link"],
                ["Finished", None, None]]

        from vinil.utils.pathbuilder import PathBuilder
        pb = PathBuilder(list)
        return pb.buildPath()

    # Failed jobs
    def linkFailed(self, director, document=None):
        actions = []
        actions.append(select(id='maindoc').replaceContent(self.contentFailed(director)))
        actions.append(select(id='path-content').replaceContent(self.pathFailed()))

        return actions

    def contentFailed(self, director):
        document = Document(title='Failed Jobs')
        p = Paragraph()
        p.text = ["""Table of failed jobs """]
        document.add(p)

        return document

    def pathFailed(self):
        list = [["Home","greet","link"],
                ["Jobs", "jobs", "link"],
                ["Failed", None, None]]

        from vinil.utils.pathbuilder import PathBuilder
        pb = PathBuilder(list)
        return pb.buildPath()


    # Temp methods for running simulation
    def runSimulation(self, director):

        self.runPWSimulation(director)
        self.runPW_DOS(director)
        self.createPWPlot(director)

        # Redirection
        #return load(actor='electronsjobs', routine='link', id=self.inventory.id)


    # Run PW simulation
    def runPWSimulation(self, director):
        config      = director.clerk.getConfigurations(id=1)
        configtext  = config.text

        #infile  = EXPORT_ROOT + "/content/data/ni.scf.in" # Uses database
        outfile = EXPORT_ROOT + "/output/ni.scf.out"

        from vinil.utils import pw
        configmod = self.setPWConfig(config=configtext)
        pw.runPWSimulation(outfile, config=configmod)

    # Sets pseudo_dir and outdir (hardcoded) and saves to the same file.
    def setPWConfig(self, filename=None, config=None):
        from vinil.utils.parser.qeconfig import QEConfig
        qe = QEConfig(filename, config)
        qe.parse()
        pd = qe.namelist('control')

        pseudo_dir  = EXPORT_ROOT + "/content/data/"
        outdir      = EXPORT_ROOT + "/content/temp/"
        pd.editParam('pseudo_dir', "'%s'" % pseudo_dir)
        pd.editParam('outdir',     "'%s'" % outdir)

        if filename is not None:
            qe.save()
            return

        if config is not None:
            return qe.toString()



    # Find electron DOS
    def runPW_DOS(self, director):
        config      = director.clerk.getConfigurations(id=3)
        configtext  = config.text

        #infile  = EXPORT_ROOT + "/content/data/ni.scf.dos.in" # Uses database

        configmod = self.setPW_DOSConfig(config=configtext)
        from vinil.utils import dos
        dos.runPW_DOS(config=configmod)

    def setPW_DOSConfig(self, filename=None, config=None):
        from vinil.utils.parser.qeconfig import QEConfig
        qe = QEConfig(filename, config)
        qe.parse()
        pd = qe.namelist('inputpp')

        outdir      = EXPORT_ROOT + "/content/temp/"
        fildos      = EXPORT_ROOT + "/output/ni.scf.dos.out"

        pd.editParam('outdir', "'%s'" % outdir)
        pd.editParam('fildos', "'%s'" % fildos)

        if filename is not None:
            qe.save()
            return

        if config is not None:
            return qe.toString()



    # Plot electron DOS
    def createPWPlot(self, director):
        infile      = EXPORT_ROOT + "/output/ni.scf.dos.out"
        imagefile   = EXPORT_ROOT + "/html/images/plots/ni_scf_dos.png"

        from vinil.utils import plot
        plot.createPWPlot(infile, imagefile)

    def getPWPlot(self, director):
        from vinil.utils import utils
        infile      = EXPORT_ROOT + "/output/ni.scf.dos.out"

        # Populate 'x', 'y' and 'z' (cumulative) lists from file
        (e,  up,  down,  cum) = utils.parseFile(infile)
        #print (e,  x,  y,  z)

        plot = Plot2D(width=500, height=350)
        
        plot.curve(x=e, y=up, label='Spin Up')
        plot.curve(x=e, y=down, label='Spin Down')
        
#        x = range(10)
#        y1 = x; y2 = [xi*xi for xi in x]
#        plot.curve(x=x, y=y1, label='Spin Up')
#        plot.curve(x=x, y=y2, label='Spin Down')
        
        return plot



    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        self.pathlist = [("Home","greet","link"),
                         ("Jobs", None, None)]

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('jobs')


# Table functions should be factored out!
def tableController(headers):
    s               = Splitter(Class="table-controller", orientation='horizontal')
    s_sort          = s.section()
    s_sort.add(Paragraph(text="Sort by", Class="sort-by") )
    s_formselect    = s.section()
    s_formselect.add(FormSelectorField(entries=enumerate(headers)) )
    s_pagination    = s.section()

    p               = Document(Class="table-pagination")
    p.add(Link(label="Prev", Class="pagination-link", onclick = load(actor='espresso', routine='link')) )
    p.add(Link(label="Next", Class="pagination-link", onclick = load(actor='espresso', routine='link')) )

    s_pagination.add(p)

    return s

def tableSimulations(names, columns):
    from luban.content.table import Table, Model, View

    # create a model class
    class model(Model):
        name        = Model.descriptors.link(name='name')
        type        = Model.descriptors.str(name='type')
        description = Model.descriptors.str(name='description')
        configs     = Model.descriptors.str(name='configs')
        created     = Model.descriptors.str(name='created')
        edit        = Model.descriptors.link(name='edit')
        remove      = Model.descriptors.link(name='remove')
        use         = Model.descriptors.link(name='use')

    # create a view
    view = View( columns =  [ View.Column(label='Name', measure='name'),
                              View.Column(label='Type', measure='type'),
                              View.Column(label='Description', measure='description'),
                              View.Column(label='Formula', measure='configs'),
                              View.Column(label='Created', measure='created'),
                              View.Column(label=' ', measure='edit'),
                              View.Column(label=' ', measure='remove'),
                              View.Column(label=' ', measure='use'),]
                              )
    # Populate the data list
    def name(i):
        link = Link(label=names[i], onclick = load(actor='greet', routine='link'))
        return link

    def edit():
        link = Link(label="Edit", onclick = load(actor='greet', routine='link'))
        return link

    def remove():
        link = Link(label="Remove", onclick = load(actor='greet', routine='link'))
        return link

    def use():
        link = Link(label="Use", onclick = load(actor='greet', routine='link'))
        return link

    data    = []
    for i in range(len(names)):
        n           = [name(i)]
        data.append(n)
        data[i]     += columns[i]
        data[i]     += [edit()]
        data[i]     += [remove()]
        data[i]     += [use()]

    # create the table
    table = Table(model=model, data=data, view=view)

    return table

__date__ = "$Sep 26, 2009 1:59:59 PM$"


