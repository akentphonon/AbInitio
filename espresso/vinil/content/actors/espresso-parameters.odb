#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormRadioBox import FormRadioBox
from luban.content.Form import Form

from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id')

    def content(self, director):
        from vinil.utils.simulationsteps import SimulationSteps
        from vinil.utils.stepper import Stepper
        splitter    = Splitter(orientation='vertical', id="step-splitter")

        simsteps    = SimulationSteps(current=2)
        s_steps     = simsteps.getSteps()
        splitter.add(s_steps)

        s_content   = splitter.section()

        d           = Document(Class="step-content")
        text ="""Here you can set parameters related to your simulation. This can
        general parameters related to your simularion such as convergence and
        iterations as well as architecture related such as the name of cluster the
        simulation will run on or number of processes"""
        d.add(Paragraph(text=text))

        d.add(Paragraph(text="First choose the type of the simulation from available options:"))
        options = [ "Total Energy (Single Self-Consistent Run) (pw.x)",
                    "Geometry Optimization (pw.x calculation=vc-relax)",
                    "Single-Phonon (pw.x -> ph.x -> dynmat.x)",
                    "Multi-Phonon (pw.x -> ph.x -> q2r.x -> matdyn.x)"]
        d.add(FormRadioBox(entries=enumerate(options)) )

        form        = Form(id="form-parameters")
        form.text(label='Simulation Name')
        form.text(label='Cutoff Energy (ecutwfc)', value="27.0")
        form.text(label='Occupations (occupations)', value="smearing")
        form.text(label='Smearing (smearing)', value="gauss")
        form.text(label='Gaussian Spreading (degauss)', value="0.02")
        form.text(label='K-Points', value="4 4 4 1 1 1")
        d.add(form)

        s_content.add(d)

        linklist    = (("espresso-material", "link"), ("espresso-review", "link"))
        stepper     = Stepper(linklist)
        s_stepper   = stepper.getStepper()
        splitter.add(s_stepper)

        return splitter

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", "espresso", "link"),
                         ("Simulation Parameters", None, None)
                         ]

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso-parameters')

__date__ = "$Sep 29, 2009 7:48:28 PM$"


