#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from opal.components.Actor import Actor as base

text = [""" &control
    calculation='scf'
    restart_mode='from_scratch',
    tprnfor = .true.
    prefix='ni',
    pseudo_dir = './',
    outdir='temp/'
 /
 &system
    ibrav=2,
    celldm(1) =6.65,
    nat=  1,
    ntyp= 1,
    nspin=2,
    starting_magnetization(1)=0.5,
    degauss=0.02,
    smearing='gauss',
    occupations='smearing',
    ecutwfc =27.0
    ecutrho =300.0
 /
 &electrons
    conv_thr =  1.0d-8
    mixing_beta = 0.7
 /
ATOMIC_SPECIES
 Ni  26.98  Ni.pbe-nd-rrkjus.UPF
ATOMIC_POSITIONS
 Ni 0.00 0.00 0.00
K_POINTS AUTOMATIC
4 4 4 1 1 1
"""]

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id')
        config  = pyre.inventory.str(name="config", default="")

    def default(self, director):
        page = director.retrievePage('template')
        page.maindoc.add(self.content(director))

        return page

    def link(self, director, document=None):
        return select(id='maindoc').replaceContent(self.content(director))

    def content(self, director):
        document = Document(title='Electron Configuration')
        form = document.form()

        p = Paragraph()
        p.text = [text]
        form.add(p)

        submit = form.submitbutton(label="Run Simulation")

        # action when form is submitted
        form.onsubmit = select(element=form).submit(
            actor = 'electronsjobs',
            routine = 'link',
            )

        return document
        

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.config     = self.inventory.config
        return

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('electronsconfig')

__date__ = "$Aug 5, 2009 11:03:42 AM$"


