#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
from luban.content import select
from luban.content import load
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from opal.components.Actor import Actor as base


# Variable that should be set in envs.sh
EXPORT_ROOT = os.environ.get('EXPORT_ROOT')

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id')
        config  = pyre.inventory.str(name="config", default="")

    def default(self, director):
        page = director.retrievePage('template')
        page.maindoc.add(self.content(director))

        return page

    def link(self, director, document=None):
        return select(id='maindoc').replaceContent(self.content(director))

    def content(self, director):
        document = Document(title='Electron Configuration')
        form = document.form()

        job = director.clerk.getJob(self.inventory.id)
        
        p = Paragraph()
        p.text = [job.config]
        form.add(p)

        submit = form.submitbutton(label="Run Simulation")

        # action when form is submitted
        form.onsubmit = select(element=form).submit(
            actor   = 'electronsconfig',
            routine = 'runSimulation',
            id=self.inventory.id
            )

        return document
        
    def runSimulation(self, director):
        
        # Run PW simulation
        from vinil.utils import pw

        infile  = EXPORT_ROOT + "/content/data/ni.scf.in"
        outfile = EXPORT_ROOT + "/output/ni.scf.out"

        self.setConfig(filename=infile)

        pw.runPWSimulation(outfile, infile)

        # Find electron DOS
        from vinil.utils import dos
        infile  = EXPORT_ROOT + "/content/data/ni.scf.dos.in"
        dos.runPW_DOS(infile)

        # Plot electron DOS
        from vinil.utils import plot
        infile      = EXPORT_ROOT + "/output/ni.scf.dos.out"
        imagefile   = EXPORT_ROOT + "/html/images/plots/ni_scf_dos.png"
        plot.createPWPlot(infile, imagefile)

        # Redirection
        return load(actor='electronsjobs', routine='link', id=self.inventory.id)

    # Sets pseudo_dir and outdir and saves to the same file.
    def setConfig(self, filename=None, configstr=None):
        from vinil.utils.configParser import QEConfig
        qe = QEConfig(filename, configstr)
        qe.parse()
        pd = qe.namelist('control')

        data = EXPORT_ROOT + "/content/data/"
        temp = EXPORT_ROOT + "/content/temp/"
        pd.editParam('pseudo_dir', "'%s'" % data)
        pd.editParam('outdir',     "'%s'" % temp)
        qe.save()
        
        #return qe.toString()
        
    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.config     = self.inventory.config
        return

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('electronsconfig')

__date__ = "$Aug 5, 2009 11:03:42 AM$"


