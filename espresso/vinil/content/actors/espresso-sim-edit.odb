#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

PACKAGES    = ["Quantum Espresso"]  #, "VASP", "GULP"]  # Packages
TYPES       = ["PW", "PH", "PP"]  # "BANDS", "CPPP", "D3", "DOS", "DYNMAT", "INITIAL_STATE", "GIPAW", "D1", "MATDYN", "PROJWFC", "PWCOND", "Q2R" # Configuration types

from vinil.utils.utils import timestamp
from vinil.dom.Configuration import Configuration

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Form import Form

from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        # Add tips for each parameter?

        id          = pyre.inventory.str('id', default='')      # Simulation Id
        sname       = pyre.inventory.str('sname', default='')
        package     = pyre.inventory.str('package', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        description = pyre.inventory.str('description', default='')
        formula     = pyre.inventory.str('formula', default='')
        fname       = pyre.inventory.str('fname', default='')
        text        = pyre.inventory.str('text', default='')
        configtype  = pyre.inventory.str('configtype', default='')


    def content(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        config  = director.clerk.getConfigurations(where="simulationId='%s'" % self.id)
        if config:
            filename    = config[0].filename
            configtext  = config[0].text
        else:
            filename    = ""
            configtext  = ""

        document = Document(title='Edit Simulation: %s' % sim.sname, Class="step-content")  # Class="step-content-form")

        form        = Form(id="form-vinil")
        sname       = form.text(name="sname", label='Simulation Name', value=sim.sname)
        package     = form.selector(name="package", label='Package', entries=enumerate(PACKAGES))
        simtype     = form.text(name="simtype", label='Type', value=sim.type)
        description = form.text(name="description", label='Description', value=sim.description)   # Make as textarea
        formula     = form.text(name="formula", label='Formula', value=sim.formula)
        fname       = form.text(name="fname", label='File Name', value=filename)
        configtype  = form.selector(name="configtype", label='Config Type', entries=enumerate(TYPES))
        text        = form.textarea(name="text", label='Config Text', value=configtext)
        #text.value     # You can set value directly
        submit      = form.submitbutton(label="Save changes")
        # TODO: Add button "Cancel"
        form.onsubmit   = select(element=form).submit(actor = 'espresso-sim-edit', routine = 'updateRecord', id=sim.id)
        document.add(form)

        return document

    # Reimplemented from class Actor (to use director)
    def link(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", "espresso", "link"),
                         (sim.sname, "espresso-sim-view", "link", self.id),
                         ("Edit", None, None)]

        return self.getActions(self.content(director), self.pathlist)


    def updateRecord(self, director):
        """Updates record in the database """
        self.verify()
        sim             = director.clerk.getSimulations(id=self.id)
        config          = director.clerk.getConfigurations(where="simulationId='%s'" % self.id)

        package         = PACKAGES[int(self.package)]
        configtype      = TYPES[int(self.configtype)]

        if sim:
            params  = {"sname": self.sname, "package": package,
                       "type": self.simtype, "description": self.description,
                       "formula": self.formula}
            sim.updateRecord(director, params)

        if config:
            params  = {"type": configtype, "filename": self.fname, "text": self.text}
            config[0].updateRecord(director, params)
        else:
            params  = {"type": configtype, "filename": self.fname, "text": self.text}
            config  = Configuration()
            config.createRecord(director, params)

        return load(actor='espresso-sim-view', routine='link', id=self.id)  # Redirection to the page

    # stub
    def verify(self):
        """Verify data first """
        pass


    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id          = self.inventory.id
        self.sname       = self.inventory.sname
        self.package     = self.inventory.package
        self.simtype     = self.inventory.simtype
        self.description = self.inventory.description
        self.formula     = self.inventory.formula
        self.fname       = self.inventory.fname
        self.text        = self.inventory.text
        self.configtype  = self.inventory.configtype

        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso-sim-edit')



__date__ = "$Nov 2, 2009 3:15:49 PM$"


