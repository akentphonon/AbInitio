#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vinil.utils.jobstable import tableJobs
from vinil.utils.table import tableController
from vinil.utils.utils import stamp2date

import os
from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.Plot2D import Plot2D

# Variable that should be set in envs.sh
EXPORT_ROOT = os.environ.get('EXPORT_ROOT')


from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id')


    def content(self, director):
        document = Document()
        #document.add(Paragraph(text="Table of All Jobs"))
        #document.add(Paragraph(text="[<Job ID> | <Simulation> | Server | User | Submitted | Status | <Delete> | <Check>]"))
        

        headers = ("Job ID", "Simulation", "Server", "User", "Submitted", "Status", " ", " ")
        
        data    = self.getTableData(director)
        self.addTable(document, "All Jobs", headers, data)

        return document


    # TODO: Refactor
    def getTableData(self, director, where=None):
        """Gets table data from Simulations database table to display in table"""
        jobs     = director.clerk.getJobs(where=where)
        # Take data from User, Simulations
        jobids      = []
        simids      = []
        simnames    = []
        columns     = []

        # Traversing jobs
        for i in range(len(jobs)):
            # Get simulation based on jobid
            (simid, simname)    = self.simdata(director, jobs[i])

            jobids.append(jobs[i].id)
            simids.append(simid)
            simnames.append(simname)
            row     = ["foxtrot.danse.us", "dexity", stamp2date(jobs[i].timeSubmitted), jobs[i].status ]
            columns.append(row)

        return (jobids, simids, simnames, columns)


    # TODO: Refactor
    def addTable(self, document, title, headers, data):
        """
        Adds table to the document
        data = (jobids, simnames, columns)
        """
        if len(data[0]) != 0:
            document.add(Paragraph(text=title, Class="header-h2"))
            document.add(tableController(headers, 'jobs'))
            document.add(tableJobs(headers, data[0], data[1], data[2], data[3]))


    def simdata(self, director, job):
        """Returns simulation data based on job"""
        simid   = None
        simname = ""

        if job:
            sim     = director.clerk.getSimulations(id=job.simulationId)
            if sim:
                simid   = sim.id
                simname = sim.sname

        return (simid, simname)

    def pathlist(self, director):
        self.pathlist = [("Home","greet","link"),
                         ("Jobs", None, None)]

        return self.pathlist

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('jobs')



# REMOVE!!!
## Table functions should be factored out!
#def tableController(headers):
#    s               = Splitter(Class="table-controller", orientation='horizontal')
#    s_sort          = s.section()
#    s_sort.add(Paragraph(text="Sort by", Class="sort-by") )
#    s_formselect    = s.section()
#    s_formselect.add(FormSelectorField(entries=enumerate(headers)) )
#    s_pagination    = s.section()
#
#    p               = Document(Class="table-pagination")
#    p.add(Link(label="Prev", Class="pagination-link", onclick = load(actor='espresso', routine='link')) )
#    p.add(Link(label="Next", Class="pagination-link", onclick = load(actor='espresso', routine='link')) )
#
#    s_pagination.add(p)
#
#    return s
#
#def tableSimulations(names, columns):
#    from luban.content.table import Table, Model, View
#
#    # create a model class
#    class model(Model):
#        name        = Model.descriptors.link(name='name')
#        type        = Model.descriptors.str(name='type')
#        description = Model.descriptors.str(name='description')
#        configs     = Model.descriptors.str(name='configs')
#        created     = Model.descriptors.str(name='created')
#        edit        = Model.descriptors.link(name='edit')
#        remove      = Model.descriptors.link(name='remove')
#        use         = Model.descriptors.link(name='use')
#
#    # create a view
#    view = View( columns =  [ View.Column(label='Name', measure='name'),
#                              View.Column(label='Type', measure='type'),
#                              View.Column(label='Description', measure='description'),
#                              View.Column(label='Formula', measure='configs'),
#                              View.Column(label='Created', measure='created'),
#                              View.Column(label=' ', measure='edit'),
#                              View.Column(label=' ', measure='remove'),
#                              View.Column(label=' ', measure='use'),]
#                              )
#    # Populate the data list
#    def name(i):
#        link = Link(label=names[i], onclick = load(actor='greet', routine='link'))
#        return link
#
#    def edit():
#        link = Link(label="Edit", onclick = load(actor='greet', routine='link'))
#        return link
#
#    def remove():
#        link = Link(label="Remove", onclick = load(actor='greet', routine='link'))
#        return link
#
#    def use():
#        link = Link(label="Use", onclick = load(actor='greet', routine='link'))
#        return link
#
#    data    = []
#    for i in range(len(names)):
#        n           = [name(i)]
#        data.append(n)
#        data[i]     += columns[i]
#        data[i]     += [edit()]
#        data[i]     += [remove()]
#        data[i]     += [use()]
#
#    # create the table
#    table = Table(model=model, data=data, view=view)
#
#    return table

__date__ = "$Sep 26, 2009 1:59:59 PM$"


