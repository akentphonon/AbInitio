#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.Plot2D import Plot2D

# Variable that should be set in envs.sh
EXPORT_ROOT = os.environ.get('EXPORT_ROOT')


from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id')


    def content(self, director):
        document = Document(title='Job Submitted')
        document.add(Paragraph(text="Your jobs was successfully submitted!"))

        return document


    def pathlist(self, director):
        self.pathlist = [("Home","greet","link"),
                         ("Jobs", "jobs", "link"),
                         ("Submitted", None, None) ]

        return self.pathlist


    # Create Job
    def createRecord(self, director):
        pass

    def submit(self, director):
        # Call 
        pass

    # Temp methods for running simulation
    def runSimulation(self, director):

        self.runPWSimulation(director)
        self.runPW_DOS(director)
        self.createPWPlot(director)

        # Redirection
        #return load(actor='electronsjobs', routine='link', id=self.inventory.id)


    # Run PW simulation
    def runPWSimulation(self, director):
        config      = director.clerk.getConfigurations(id=1)
        configtext  = config.text

        #infile  = EXPORT_ROOT + "/content/data/ni.scf.in" # Uses database
        outfile = EXPORT_ROOT + "/output/ni.scf.out"

        from vinil.utils import pw
        configmod = self.setPWConfig(config=configtext)
        pw.runPWSimulation(outfile, config=configmod)

    # Sets pseudo_dir and outdir (hardcoded) and saves to the same file.
    def setPWConfig(self, filename=None, config=None):
        from vinil.utils.parser.qeconfig import QEConfig
        qe = QEConfig(filename, config)
        qe.parse()
        pd = qe.namelist('control')

        pseudo_dir  = EXPORT_ROOT + "/content/data/"
        outdir      = EXPORT_ROOT + "/content/temp/"
        pd.editParam('pseudo_dir', "'%s'" % pseudo_dir)
        pd.editParam('outdir',     "'%s'" % outdir)

        if filename is not None:
            qe.save()
            return

        if config is not None:
            return qe.toString()



    # Find electron DOS
    def runPW_DOS(self, director):
        config      = director.clerk.getConfigurations(id=3)
        configtext  = config.text

        #infile  = EXPORT_ROOT + "/content/data/ni.scf.dos.in" # Uses database

        configmod = self.setPW_DOSConfig(config=configtext)
        from vinil.utils import dos
        dos.runPW_DOS(config=configmod)

    def setPW_DOSConfig(self, filename=None, config=None):
        from vinil.utils.parser.qeconfig import QEConfig
        qe = QEConfig(filename, config)
        qe.parse()
        pd = qe.namelist('inputpp')

        outdir      = EXPORT_ROOT + "/content/temp/"
        fildos      = EXPORT_ROOT + "/output/ni.scf.dos.out"

        pd.editParam('outdir', "'%s'" % outdir)
        pd.editParam('fildos', "'%s'" % fildos)

        if filename is not None:
            qe.save()
            return

        if config is not None:
            return qe.toString()



    # Plot electron DOS
    def createPWPlot(self, director):
        infile      = EXPORT_ROOT + "/output/ni.scf.dos.out"
        imagefile   = EXPORT_ROOT + "/html/images/plots/ni_scf_dos.png"

        from vinil.utils import plot
        plot.createPWPlot(infile, imagefile)

    def getPWPlot(self, director):
        from vinil.utils import utils
        infile      = EXPORT_ROOT + "/output/ni.scf.dos.out"

        # Populate 'x', 'y' and 'z' (cumulative) lists from file
        (e,  up,  down,  cum) = utils.parseFile(infile)
        #print (e,  x,  y,  z)

        plot = Plot2D(width=500, height=350)

        plot.curve(x=e, y=up, label='Spin Up')
        plot.curve(x=e, y=down, label='Spin Down')

#        x = range(10)
#        y1 = x; y2 = [xi*xi for xi in x]
#        plot.curve(x=x, y=y1, label='Spin Up')
#        plot.curve(x=x, y=y2, label='Spin Down')

        return plot

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('jobs-submitted')


__date__ = "$Nov 4, 2009 9:27:51 AM$"


