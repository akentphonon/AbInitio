#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vinil.utils.const import STEPS
from vinil.utils.utils import stamp2date

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link

from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')      # Simulation Id


    def content(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        config  = director.clerk.getConfigurations(where="simulationId='%s'" % self.id)
        if config:
            filename    = config[0].filename
        else:
            filename    = "None"

        document = Document(title='Simulation Name: %s' % sim.sname)
        document.add(Link(label="Edit", Class="action-link", onclick = load(actor='espresso-sim-edit', routine='link', id=self.id)))
        document.add(Link(label="Delete", Class="action-link", onclick = load(actor='espresso-sim-delete', routine='link', id=self.id)))
        document.add(Link(label="Use", Class="action-link", onclick = load(actor='espresso-sim-use', routine='link', id=self.id)))
        document.add(Paragraph(text="Description: %s" % sim.description))
        document.add(Paragraph(text="Type: %s" % sim.type))
        document.add(Paragraph(text="Package: %s" % sim.package))
        document.add(Paragraph(text="Formula: %s" % sim.formula))
        document.add(Paragraph(text="Created: %s" % stamp2date(sim.timeCreated)))
        document.add(Paragraph(text="Input Files: %s" % filename))
        document.add(Paragraph(text="Simulation Parameters: settings.conf ")) # [STUB]

        self.addJobs(director, document)
        self.addRefs(document)
        
        return document

    def addJobs(self, director, document):
        """Adds list of job ids to the document"""
        jobsdoc = Document(Class="display-inline")
        jobsdoc.add(Paragraph(text="Jobs: "))
        jobids  = self.jobs(director)
        if len(jobids) != 0:
            for id in jobids:
                jobsdoc.add(Link(label=id, Class="action-link", onclick=load(actor="jobs-view", routine="link", id=id)))
        else:
            jobsdoc.add(Paragraph(text="None", Class="action-link"))
        document.add(jobsdoc)  # [STUB]


    def addRefs(self, document):
        document.add(Document(Class="clear-both"))   # Empty document
        refsdoc = Document(Class="display-block")
        refsdoc.add(Link(label=STEPS[1], onclick=load(actor="espresso-set-config", routine="link", id=self.id)))
        refsdoc.add(Link(label=STEPS[2], onclick=load(actor="espresso-step-three", routine="link", id=self.id)))
        refsdoc.add(Link(label=STEPS[3], onclick=load(actor="espresso-step-four", routine="link", id=self.id)))
        refsdoc.add(Link(label="Submit to Queue", onclick=load(actor="jobs-submitted", routine="submit", id=self.id)))
        document.add(refsdoc)

    def inputFiles(self):
        pass

    def jobs(self, director):
        jobids = []
        jobs  = director.clerk.getJobs(where="simulationId='%s'" % self.id)
        for j in jobs:
            if j:
                jobids.append(j)


        return jobids

    def settings(self):
        pass


    def pathlist(self, director):
        sim     = director.clerk.getSimulations(id=self.id)

        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", "espresso", "link"),
                         (sim.sname, None, None)]

        return self.pathlist
    


    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso-sim-view')


__date__ = "$Nov 2, 2009 3:15:35 PM$"


