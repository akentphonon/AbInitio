#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField
from vinil.utils.utils import newId

from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')

    def content(self, director):
        document = Document(title='Quantum Espresso')

        #jobs    = director.clerk.getTable('job')
        #
        #jobs    = director.clerk.getJobs()
        #token = director.idd.token()


        text = """Quantum ESPRESSO  is an integrated suite of
        computer codes for electronic-structure calculations and materials
        modeling at the nanoscale. It is based on density-functional theory,
        plane waves, and pseudopotentials (both norm-conserving and ultrasoft). 
        You can create a new simulation following the button
        "Create New Simulation" or use existing simulation from Favorites as a template.
        To start using Quantum Espresso it is usefull to try out running 
        simulations from Examples"""
        
        p = Paragraph(text=text)
        document.add(p)

        text = '<img src="images/icons/newsimulation.png" id="create-new-simulation"/>'
        d = HtmlDocument(text=text, onclick=load(actor='espresso-material', routine='link'))
        document.add(d)

        headers = ["Name", "Type", "Description", "Formula", "Created"]

        # Sample data for Favorites
        sim     = director.clerk.getSimulations()

        names   = []
        columns = []

        for i in range(len(sim)):
            if sim[i].isFavorite:
                names.append(sim[i].sname)
                row  = [sim[i].type, sim[i].description, sim[i].formula, sim[i].created]
                columns.append(row)
            
        document.add(Paragraph(text="Favorites", Class="header-h2"))
        document.add(tableController(headers))
        document.add(tableSimulations(names, columns))

        names   = []
        columns = []

        for i in range(len(sim)):
            if sim[i].isExample:
                names.append(sim[i].sname)
                row  = [sim[i].type, sim[i].description, sim[i].formula, sim[i].created]
                columns.append(row)


        document.add(Paragraph(text="Examples", Class="header-h2"))
        document.add(tableController(headers))
        document.add(tableSimulations(names, columns))

        return document
    

    def linkRun(self, director):
        pathlist = [("Home","greet","link"),
                     ("Simulations", "simulations", "link"),
                     ("Quantum Espresso", "espresso", "link"),
                     ("Run Simulation", None, None)
                     ]

        def content(director):
            document = Document(title='Run Simulation')

            text = """Run Simulation"""
            p = Paragraph(text=text)
            document.add(p)


            return document

        return self.getActions(content(director), pathlist)
    

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", None, None)]

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso')


def tableController(headers):
    s               = Splitter(Class="table-controller", orientation='horizontal')
    #s_sort          = s.section()
    #s_sort.add(Paragraph(text="Sort by", Class="sort-by") )
    s_filter        = s.section()
    s_filter.add(FormTextField(label='Filter', Class="table-filter"))
    s_formselect    = s.section()
    s_formselect.add(FormSelectorField(entries=enumerate(headers)) )

    s_pagination    = s.section()
    p               = Document(Class="table-pagination")
    p.add(Link(label="Prev", Class="pagination-link", onclick = load(actor='espresso', routine='link')) )
    p.add(Link(label="Next", Class="pagination-link", onclick = load(actor='espresso', routine='link')) )

    s_pagination.add(p)

    return s

def tableSimulations(names, columns):
    from luban.content.table import Table, Model, View

    # create a model class
    class model(Model):
        name        = Model.descriptors.link(name='name')
        type        = Model.descriptors.str(name='type')
        description = Model.descriptors.str(name='description')
        configs     = Model.descriptors.str(name='configs') 
        created     = Model.descriptors.str(name='created')
        edit        = Model.descriptors.link(name='edit')
        remove      = Model.descriptors.link(name='remove')
        use         = Model.descriptors.link(name='use')

    # create a view
    view = View( columns =  [ View.Column(label='Name', measure='name'),
                              View.Column(label='Type', measure='type'),
                              View.Column(label='Description', measure='description'),
                              View.Column(label='Formula', measure='configs'), 
                              View.Column(label='Created', measure='created'),
                              View.Column(label=' ', measure='edit'),
                              View.Column(label=' ', measure='remove'),
                              View.Column(label=' ', measure='use'),]
                              )
    # Populate the data list
    def name(i):
        link = Link(label=names[i], onclick = load(actor='greet', routine='link'))
        return link

    def edit():
        link = Link(label="Edit", onclick = load(actor='greet', routine='link'))
        return link

    def remove():
        link = Link(label="Remove", onclick = load(actor='greet', routine='link'))
        return link

    def use():
        link = Link(label="Use", onclick = load(actor='greet', routine='link'))
        return link

    data    = []
    for i in range(len(names)):
        n           = [name(i)]
        data.append(n)
        data[i]     += columns[i]
        data[i]     += [edit()]
        data[i]     += [remove()]
        data[i]     += [use()]

    # create the table
    table = Table(model=model, data=data, view=view)

    return table

__date__ = "$Sep 26, 2009 1:59:59 PM$"


