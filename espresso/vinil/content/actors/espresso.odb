#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField
from luban.content.Form import Form
from vinil.utils.utils import newId

from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')      # Simulation id
        #simid   = pyre.inventory.str('simid', default='')

    # Actor.link() calls content() and self.pathlist
    # Default call
    def content(self, director):
        document = Document(title='Quantum Espresso')

        #jobs    = director.clerk.getTable('job')
        #
        #jobs    = director.clerk.getJobs()
        #token = director.idd.token()


        text = """Quantum ESPRESSO  is an integrated suite of
        computer codes for electronic-structure calculations and materials
        modeling at the nanoscale. It is based on density-functional theory,
        plane waves, and pseudopotentials (both norm-conserving and ultrasoft). 
        You can create a new simulation following the button
        "Create New Simulation" or use existing simulation from Favorites as a template.
        To start using Quantum Espresso it is usefull to try out running 
        simulations from Examples"""
        
        p = Paragraph(text=text)
        document.add(p)

        text = '<img src="images/icons/newsimulation.png" id="create-new-simulation"/>'
        d = HtmlDocument(text=text, onclick=load(actor='espresso-material', routine='link'))
        document.add(d)

        headers = ["Name", "Type", "Description", "Formula", "Created"]

        # Sample data for Favorites
        sim     = director.clerk.getSimulations()

        ids     = []
        names   = []
        columns = []

        for i in range(len(sim)):
            if sim[i].isFavorite:
                ids.append(sim[i].id)
                names.append(sim[i].sname)
                row     = [sim[i].type, sim[i].description, sim[i].formula, sim[i].timeCreated]
                columns.append(row)

        if len(ids) != 0:
            document.add(Paragraph(text="Favorites", Class="header-h2"))
            document.add(tableController(headers))
            document.add(tableSimulations(names, columns, ids))

        ids     = []
        names   = []
        columns = []

        for i in range(len(sim)):
            if sim[i].isExample:
                ids.append(sim[i].id)
                names.append(sim[i].sname)
                row  = [sim[i].type, sim[i].description, sim[i].formula, sim[i].timeCreated]
                columns.append(row)

        if len(ids) != 0:
            document.add(Paragraph(text="Examples", Class="header-h2"))
            document.add(tableController(headers))
            document.add(tableSimulations(names, columns, ids))

        return document
    

    # Simulation page
    def linkSim(self, director, document=None):
        actions = []
        actions.append(select(id='maindoc').replaceContent(self.contentSim(director)))
        actions.append(select(id='path-content').replaceContent(self.pathSim(director)))

        return actions


    def pathSim(self, director):
        sim     = director.clerk.getSimulations(id=self.id)

        list = [("Home","greet","link"),
                ("Simulations", "simulations", "link"),
                ("Quantum Espresso", "espresso", "link"),
                (sim.sname, None, None)]

        from vinil.utils.pathbuilder import PathBuilder
        pb = PathBuilder(list)
        return pb.buildPath()


    def contentSim(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        config  = director.clerk.getConfigurations(where="simulationId='%s'" % self.id)
        if config:
            filename    = config[0].filename
        else:
            filename    = "None"
            
        document = Document(title='Simulation Name: %s' % sim.sname)
        document.add(Link(label="Edit", Class="action-link", onclick = load(actor='espresso', routine='linkEdit', id=self.id)))
        document.add(Link(label="Delete", Class="action-link", onclick = load(actor='espresso', routine='linkDelete', id=self.id)))
        document.add(Link(label="Use", Class="action-link", onclick = load(actor='espresso', routine='linkUse', id=self.id)))
        document.add(Paragraph(text="Description: %s" % sim.description))
        document.add(Paragraph(text="Type: %s" % sim.type))
        document.add(Paragraph(text="Package: %s" % sim.package))
        document.add(Paragraph(text="Formula: %s" % sim.formula))
        document.add(Paragraph(text="Created: %s" % sim.timeCreated))
        document.add(Paragraph(text="Files: %s" % filename))

        return document

    
    # Edit Simulation page
    def linkEdit(self, director, document=None):
        actions = []
        actions.append(select(id='maindoc').replaceContent(self.contentEdit(director)))
        actions.append(select(id='path-content').replaceContent(self.pathEdit(director)))

        return actions


    def pathEdit(self, director):
        sim     = director.clerk.getSimulations(id=self.id)

        list = [("Home","greet","link"),
                ("Simulations", "simulations", "link"),
                ("Quantum Espresso", "espresso", "link"),
                (sim.sname, "espresso", "linkSim", self.id),        # !!! Need to pass Id
                ("Edit", None, None)]

        from vinil.utils.pathbuilder import PathBuilder
        pb = PathBuilder(list)
        return pb.buildPath()


    def contentEdit(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        config  = director.clerk.getConfigurations(where="simulationId='%s'" % self.id)
        if config:
            filename    = config[0].filename
            configtext  = config[0].text
        else:
            filename    = ""
            configtext  = ""

        document = Document(title='Edit Simulation: %s' % sim.sname, Class="step-content")  # Class="step-content-form")

        packages    = ["Quantum Espresso"]  #, "VASP", "GULP"]

        form        = Form(id="form-vinil")
        form.text(label='Simulation Name', value=sim.sname)
        form.selector(label='Package', entries=enumerate(packages))
        form.text(label='Type', value=sim.type)
        form.text(label='Description', value=sim.description)
        form.text(label='Formula', value=sim.formula)
        form.text(label='File Name', value=filename)
        form.textarea(label='Config Text', value=configtext)
        submit      = form.submitbutton(label="Save changes")
        form.onsubmit   = select(element=form).submit(actor = 'espresso', routine = 'linkSim', id=self.id)
        document.add(form)
        
        return document

    # Delete Simulation page
    def linkDelete(self, director, document=None):
        actions = []
        actions.append(select(id='maindoc').replaceContent(self.contentDelete(director)))
        actions.append(select(id='path-content').replaceContent(self.pathDelete(director)))

        return actions


    def pathDelete(self, director):
        sim     = director.clerk.getSimulations(id=self.id)

        list = [("Home","greet","link"),
                ("Simulations", "simulations", "link"),
                ("Quantum Espresso", "espresso", "link"),
                (sim.sname, "espresso", "linkSim", self.id),        # !!! Need to pass Id
                ("Delete", None, None)]

        from vinil.utils.pathbuilder import PathBuilder
        pb = PathBuilder(list)
        return pb.buildPath()


    def contentDelete(self, director):
        sim     = director.clerk.getSimulations(id=self.id)

        document = Document(title='Deleting simulation %s ...' % sim.sname)
        document.add(Paragraph(text="Are you sure to delete the simulation?"))

        return document


    # Use Simulation page
    def linkUse(self, director, document=None):
        actions = []
        actions.append(select(id='maindoc').replaceContent(self.contentUse(director)))
        actions.append(select(id='path-content').replaceContent(self.pathUse(director)))

        return actions


    def pathUse(self, director):
        sim     = director.clerk.getSimulations(id=self.id)

        list = [("Home","greet","link"),
                ("Simulations", "simulations", "link"),
                ("Quantum Espresso", "espresso", "link"),
                (sim.sname, "espresso", "linkSim", self.id),        # !!! Need to pass Id
                ("Use Template", None, None)]

        from vinil.utils.pathbuilder import PathBuilder
        pb = PathBuilder(list)
        return pb.buildPath()


    def contentUse(self, director):
        sim     = director.clerk.getSimulations(id=self.id)

        document = Document(title='Use Template %s' % sim.sname)
        document.add(Paragraph(text="Form"))

        return document


    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", None, None)]

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        #self.simid = self.inventory.simid
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso')




def tableController(headers):
    s               = Splitter(Class="table-controller", orientation='horizontal')
    #s_sort          = s.section()
    #s_sort.add(Paragraph(text="Sort by", Class="sort-by") )
    s_filter        = s.section()
    s_filter.add(FormTextField(label='Filter', Class="table-filter"))
    s_formselect    = s.section()
    s_formselect.add(FormSelectorField(entries=enumerate(headers)) )

    s_pagination    = s.section()
    p               = Document(Class="table-pagination")
    p.add(Link(label="Prev", Class="pagination-link", onclick = load(actor='espresso', routine='link')) )
    p.add(Link(label="Next", Class="pagination-link", onclick = load(actor='espresso', routine='link')) )

    s_pagination.add(p)

    return s

def tableSimulations(names, columns, ids):
    from luban.content.table import Table, Model, View

    # create a model class
    class model(Model):
        name        = Model.descriptors.link(name='name')
        type        = Model.descriptors.str(name='type')
        description = Model.descriptors.str(name='description')
        configs     = Model.descriptors.str(name='configs') 
        created     = Model.descriptors.str(name='created')
        edit        = Model.descriptors.link(name='edit')
        remove      = Model.descriptors.link(name='remove')
        use         = Model.descriptors.link(name='use')

    # create a view
    view = View( columns =  [ View.Column(label='Name', measure='name'),
                              View.Column(label='Type', measure='type'),
                              View.Column(label='Description', measure='description'),
                              View.Column(label='Formula', measure='configs'), 
                              View.Column(label='Created', measure='created'),
                              View.Column(label=' ', measure='edit'),
                              View.Column(label=' ', measure='remove'),
                              View.Column(label=' ', measure='use'),]
                              )
    # Populate the data list
    def name(i):
        link = Link(label=names[i], onclick = load(actor='espresso', routine='linkSim', id=ids[i]))
        return link

    def edit(i):
        link = Link(label="Edit", onclick = load(actor='espresso', routine='linkEdit', id=ids[i]))
        return link

    def delete(i):
        link = Link(label="Delete", onclick = load(actor='espresso', routine='linkDelete', id=ids[i]))
        return link

    def use(i):
        link = Link(label="Use", onclick = load(actor='espresso', routine='linkUse', id=ids[i]))
        return link

    data    = []
    for i in range(len(names)):
        n           = [name(i)]
        data.append(n)
        data[i]     += columns[i]
        data[i]     += [edit(i)]
        data[i]     += [delete(i)]
        data[i]     += [use(i)]

    # create the table
    table = Table(model=model, data=data, view=view)

    return table

__date__ = "$Sep 26, 2009 1:59:59 PM$"


# *************** DEAD CODE ******************


#    def linkRun(self, director):
#        pathlist = [("Home","greet","link"),
#                     ("Simulations", "simulations", "link"),
#                     ("Quantum Espresso", "espresso", "link"),
#                     ("Run Simulation", None, None)
#                     ]
#
#        def content(director):
#            document = Document(title='Run Simulation')
#
#            text = """Run Simulation"""
#            p = Paragraph(text=text)
#            document.add(p)
#
#
#            return document
#
#        return self.getActions(content(director), pathlist)



