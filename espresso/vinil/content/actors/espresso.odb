#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link

from opal.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id')

    def default(self, director):
        page = director.retrieveVisual('template')

        page.skeleton.path.add(self.path())
        page.maindoc.add(self.content(director))

        return page

    def link(self, director, document=None):
        actions = []
        actions.append(select(id='path-content').replaceContent(self.path()))
        actions.append(select(id='maindoc').replaceContent(self.content(director)))

        return actions

    def content(self, director):
        document = Document(title='Quantum Espresso')

        text = '<img src="images/icons/newsimulation.png" id="create-new-simulation"/>'
        d = HtmlDocument(text=text, onclick=load(actor='espresso', routine='createNew'))
        document.add(d)

        text = "or"
        p = Paragraph(text=text, id="text-or")
        document.add(p)

        text = """use existing simulation from Favorites:"""
        p = Paragraph(text=text, id="test-after-or")
        document.add(p)

        document.add(table())

        return document

    def path(self):
        list = [("Home","greet","link"),
                ("Simulations", "simulations", "link"),
                ("Quantum Espresso", None, None)]

        from vinil.utils.pathbuilder import PathBuilder
        pb = PathBuilder(list)
        return pb.buildPath()


    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso')

def table():
    from luban.content.table import Table, Model, View

    # create a model class
    class model(Model):
        name        = Model.descriptors.link(name='name')
        type        = Model.descriptors.str(name='type')
        description = Model.descriptors.str(name='description')
        configs     = Model.descriptors.str(name='configs')
        created     = Model.descriptors.str(name='created')
        edit        = Model.descriptors.str(name='edit')

    # create a view
    view = View( columns =  [ View.Column(label='Name', measure='name'),
                              View.Column(label='Type', measure='type'),
                              View.Column(label='Description', measure='description'),
                              View.Column(label='Config Files', measure='configs'),
                              View.Column(label='Created', measure='created'),                              ]
                              )
    # Populate the data list.
    names   = ['MgB2_SP', 'MgB2_E', 'MgB2_MP']
    columns = [['Single-Phonon', 'Single-Phonon simualtion', 'filename_sp.conf', '25-09-2009'],
               ['Electron', 'Electron simualtion', 'filename_e.conf', '26-09-2009'],
               ['Multy-Phonon', 'Multy-Phonon simualtion', 'filename_mp.conf', '27-09-2009'],
                ]

    def getName(i):
        link = Link(label=names[i], onclick = load(actor='greet', routine='link'))
        return link

    data    = []
    for i in range(len(names)):
        n           = [getName(i)]
        data.append(n)
        data[i]     += columns[i]
    
    # create the table
    table = Table(model=model, data=data, view=view)

    return table


__date__ = "$Sep 26, 2009 1:59:59 PM$"


