#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vinil.utils.const import PACKAGES, SIMULATIONS, TYPES
from vinil.dom.Configuration import Configuration
from vinil.dom.Simulation import Simulation

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Form import Form
from luban.content.Button import Button


from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        # Add tips for each parameter?

        # Simulation part
        id          = pyre.inventory.str('id', default='')      # Simulation Id
        sname       = pyre.inventory.str('sname', default='')
        package     = pyre.inventory.str('package', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        description = pyre.inventory.str('description', default='')
        formula     = pyre.inventory.str('formula', default='')

        # Config part
        fname       = pyre.inventory.str('fname', default='')
        text        = pyre.inventory.str('text', default='')
        configtype  = pyre.inventory.str('configtype', default='')


    def content(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        config  = director.clerk.getConfigurations(where="simulationId='%s'" % self.id)
        if config:
            filename    = config[0].filename
            configtext  = config[0].text
        else:
            filename    = ""
            configtext  = ""

        document = Document(title='Use Template: %s' % sim.sname, Class="step-content")  # Class="step-content-form")

        form        = Form(id="form-vinil")
        sname       = form.text(name="sname", label='Simulation Name', value=sim.sname)
        package     = form.selector(name="package", label='Package', entries=enumerate(PACKAGES))
        simtype     = form.selector(name="simtype", label='Simulation Type', entries=enumerate(SIMULATIONS))
        description = form.text(name="description", label='Description', value=sim.description)   # Make as textarea
        formula     = form.text(name="formula", label='Formula', value=sim.formula)
        fname       = form.text(name="fname", label='File Name', value=filename)
        configtype  = form.selector(name="configtype", label='Config Type', entries=enumerate(TYPES))
        text        = form.textarea(name="text", label='Config Text', value=configtext)
        #text.value     # You can set value directly
        submit      = form.submitbutton(label="Create New Simulation")
        form.onsubmit   = select(element=form).submit(actor = 'espresso/sim-use', routine = 'createRecord', id=sim.id)

        # TODO: "Cancel" button looks UGLY
        cancel      = Button(label="Cancel")
        cancel.onclick = load(actor = 'espresso/index', routine = 'link')
        form.add(cancel)
        document.add(form)

        return document


    def pathlist(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", "espresso/index", "link"),
                         (sim.sname, "espresso/sim-view", "link", self.id),
                         ("Use Template", None, None)]

        return self.pathlist


    def createRecord(self, director):
        """Creates record in the database """
        self.verify()
        sim             = director.clerk.getSimulations(id=self.id)
        config          = director.clerk.getConfigurations(where="simulationId='%s'" % self.id)

        s   = self._createSimRecord(director)
        c   = self._createConfigRecord(director, s.id)
        return load(actor='espresso/index', routine='link')  # Redirection to the page


    def _createSimRecord(self, director):
        """Create simulation record"""
        package = PACKAGES[int(self.package)]
        simtype = SIMULATIONS[int(self.simtype)]
        params  = {"sname": self.sname, "package": package,
                   "type": simtype, "description": self.description,
                   "formula": self.formula, "isFavorite": True}
        s       = Simulation()
        s.createRecord(director, params)
        return s


    def _createConfigRecord(self, director, sid):
        """Create configuration record"""
        configtype      = TYPES[int(self.configtype)]
        params  = {"simulationId": sid, "type": configtype, "filename": self.fname, "text": self.text} # no description?
        config  = Configuration()
        config.createRecord(director, params)


    # stub
    def verify(self):
        """Verify data first """
        pass


    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id          = self.inventory.id
        self.sname       = self.inventory.sname
        self.package     = self.inventory.package
        self.simtype     = self.inventory.simtype
        self.description = self.inventory.description
        self.formula     = self.inventory.formula
        self.fname       = self.inventory.fname
        self.text        = self.inventory.text
        self.configtype  = self.inventory.configtype

        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso/sim-use')

__date__ = "$Nov 2, 2009 3:19:32 PM$"


