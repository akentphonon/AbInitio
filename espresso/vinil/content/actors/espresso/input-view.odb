#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vinil.utils.const import STEPS, TYPES
from vinil.utils.utils import stamp2date
from vinil.utils.simulationsteps import SimulationSteps
from vinil.utils.stepper import Stepper
from vinil.dom.Configuration import Configuration

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormRadioBox import FormRadioBox
from luban.content.Form import Form
from luban.content.Tabs import Tabs
from luban.content.Button import Button

from vinil.components.Actor import Actor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        configid    = pyre.inventory.str('configid', default='')    # Configuration Id
        type        = pyre.inventory.str('type', default='')        # Type of the configuration file
        fname       = pyre.inventory.str('fname', default='')
        description = pyre.inventory.str('description', default='')
        text        = pyre.inventory.str('text', default='')


    def content(self, director):
        self._sim       = director.clerk.getSimulations(id=self.id)
        self._input     = director.clerk.getConfigurations(id=self.configid)

        document        = Document(title="%s Configuration: %s" % (self.type, self.filename(self._input)))   # , Class="step-content"
        self.showLinks(document)    # Finish
        self.showConfig(document, self._input)

        return document


    def showLinks(self, document):  #, inputs
        document.add(Link(label="EditBOBO", Class="action-link",
                          onclick = load(actor='espresso-input-edit',
                          routine='link', id=self.id, configid=self.configid,
                          type=self.type)))
        document.add(Link(label="Delete", Class="action-link",
                          onclick = load(actor='espresso-input-delete',
                          routine='link', id=self.id, configid=self.configid,
                          type=self.type)))


    def showConfig(self, document, input):
        document.add(Paragraph(text="File Name: %s" % input.filename))
        document.add(Paragraph(text="Type: %s" % input.type))
        document.add(Paragraph(text="Description: %s" % input.description))
        document.add(Paragraph(text="Parser: %s" % input.parser))
        document.add(Paragraph(text="Created: %s" % stamp2date(input.timeCreated)))
        document.add(Paragraph(text="Last Modified: %s" % stamp2date(input.timeModified)))
        document.add(Paragraph(text="Text: %s" % input.text))


    def filename(self, input):
        if input:
            return input.filename

        return ""


    def pathlist(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", "espresso", "link"),
                         (sim.sname, "espresso-sim-view", "link", self.id),
                         ("%s Configuration" % self.type, None, None)]

        return self.pathlist

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.configid       = self.inventory.configid
        self.type           = self.inventory.type
        self.fname          = self.inventory.fname
        self.description    = self.inventory.description
        self.text           = self.inventory.text

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso-input-view')

__date__ = "$Nov 9, 2009 5:10:40 PM$"




#        #self._inputs    = director.clerk.getConfigurations(where="simulationId='%s' AND type='%s'" % (self.id, self.type))
#    # ?
#    def inputId(self, inputs):
#        if inputs:
#            assert len(inputs) == 1
#            return inputs[0].id
#
#        return ""


#        d.add(Link(label="Use Configuration Builder", onclick=load(actor="espresso-config-builder", routine="link", id=self.id)))
#        d.add(Paragraph(text="OR"))
#        d.add(Paragraph(text="Create configuration using the form:"))
#
#        form        = Form(id="form-vinil")
#        fname       = form.text(name="fname", label='File Name', value=self.fname)
#        description = form.text(name="description", label='Description', value=self.description)
#        type        = form.text(name="type", label='Config Type', value=self.type)      # Should be text
#        text        = form.textarea(name="text", label='Config Text', value=self.text)
#        submit      = form.submitbutton(label="Create Configuration")
#        form.onsubmit   = select(element=form).submit(actor = 'espresso-input-add', routine = 'createRecord', id=self._sim.id)
#
#        # TODO: "Cancel" button looks UGLY
#        cancel      = Button(label="Cancel")
#        cancel.onclick = load(actor = 'espresso-sim-view', routine = 'link', id=self.id)
#        form.add(cancel)
#        d.add(form)


