#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from opal.components.Actor import Actor as base

JOB_ID=1 # Hardcoded value id=1 for electrons

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id              = pyre.inventory.str('id')
        ibrav           = pyre.inventory.int(name="ibrav", default=2)
        ecutwfc         = pyre.inventory.float(name="ecutwfc", default=27.0)
        occupations     = pyre.inventory.str(name="occupations", default="smearing")
        smearing        = pyre.inventory.str(name="smearing", default="gauss")
        degauss         = pyre.inventory.float(name="degauss", default=0.02)
        atomic_species  = pyre.inventory.str(name="atomic_species", default="Ni 26.98")
        atomic_positions = pyre.inventory.str(name="atomic_positions", default="Ni 0 0 0")
        kpoints         = pyre.inventory.str(name="kpoints", default="4 4 4 1 1 1")


    def default(self, director):
        page = director.retrievePage('template')
        page.maindoc.add(self.content(director))

        return page

    def link(self, director, document=None):
        return select(id='maindoc').replaceContent(self.content(director))

    def content(self, director):
        document = Document(title='New Electron Simulation')
        form = document.form()

        ibrav = form.text(id='ibrav', name='ibrav', label='Bravais-Lattice Index [<b>ibrav</b>]:',
            value=self.inventory.ibrav)
        ibrav.help = ''

        ecutwfc = form.text(id='ecutwfc', name='ecutwfc', label='Cutoff Energy [<b>ecutwfc</b>]:',
            value=self.inventory.ecutwfc)
        ecutwfc.help = ''

        occupations = form.text(id='occupations', name='occupations', label='Occupations [<b>occupations</b>]:',
            value=self.inventory.occupations)
        occupations.help = ''

        smearing = form.text(id='smearing', name='smearing', label='Smearing [<b>smearing</b>]: ',
            value=self.inventory.smearing)
        smearing.help = ''

        degauss = form.text(id='degauss', name='degauss', label='Gaussian Spreading [<b>degauss</b>]:',
            value=self.inventory.degauss)
        degauss.help = ''

        atomic_species = form.text(id='atomic_species', name='atomic_species', label='Atomic Species [<b>ATOMIC_SPECIES</b>]:',
            value=self.inventory.atomic_species)#, size="20"
        atomic_species.help = ''

        s = form.selector(id="atomic_potential", name="atomic_potential", entries=[("Ni.pde-nd-rrkjus.UPF","Ni.pde-nd-rrkjus.UPF")], label="")

        p       = Paragraph()
        p.text  = ['(Pseudo Potential)']
        form.add(p)
        
        atomic_positions = form.textarea(id='atomic_positions', name='atomic_positions', label='Atomic Positions [<b>ATOMIC_POSITIONS</b>]:',
            value=self.inventory.atomic_positions)#, rows="2", cols="23"
        atomic_positions.help = ''
        
        kpoints = form.textarea(id='kpoints', name='kpoints', label='K-Points [<b>K_POINTS AUTOMATIC</b>]:<br /><br />',
            value=self.inventory.kpoints)#, rows="2", cols="23"
        kpoints.help = ''
        
        submit = form.submitbutton(label="Create Simulation")

        # action when form is submitted
        form.onsubmit = select(element=form).submit(
            actor = 'electronsedit',
            routine = 'link' # verify
            )
            
        return document
        

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id              = self.inventory.id
        self.ibrav           = self.inventory.ibrav
        self.ecutwfc         = self.inventory.ecutwfc
        self.occupations     = self.inventory.occupations
        self.smearing        = self.inventory.smearing
        self.degauss         = self.inventory.degauss
        self.atomic_species  = self.inventory.atomic_species
        self.atomic_positions = self.inventory.atomic_positions
        self.kpoints         = self.inventory.kpoints

        return

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('electronsnew')

__date__ = "$Aug 5, 2009 11:03:42 AM$"


