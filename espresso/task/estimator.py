import string
import qe_io_dict

from config import Config

class Estimator(Config):
    def __init__(self, fname=None):
        Config.__init__(self, fname)

    def getTotalEnergy(self):
        'Extract total energy value from pwscf output'
        #read Espresso output into memory:
        pwscfOut = qe_io_dict.read_file(self.pwscfOutput)
        key = qe_io_dict.find_key_from_marker_string(pwscfOut, '!', 'total energy')
        words = string.split(pwscfOut[key])
        return [float(words[4])]
    
    def getSinglePhonon(self):
        'Obtain a list of phonon modes from output generated by dynmat.x'
        dynmatOut = qe_io_dict.read_file(self.dynmatOutput)
        keyStart = qe_io_dict.find_key_from_marker_string(dynmatOut, '#', 'mode')
        modeNum = 1
        key = keyStart + 1
        words = string.split(dynmatOut[key])
        modes = []
        while words[0]	 == str(modeNum):
            modes.append( float(words[1]) )
            key = key + 1
            modeNum = modeNum + 1
            words = string.split(dynmatOut[key])
        return modes
        
    def getLatticeParameters(self):
        'Extract lattice parameters after pwscf geometry optimization'
        def vectorLength(v):
            from math import sqrt
            s = 0.0
            for val in v: s = s + val**2
            return sqrt( s )
        pwscfOut = qe_io_dict.read_file(self.pwscfOutput)
        key_a_0 = qe_io_dict.find_key_from_string(pwscfOut, 'lattice parameter (a_0)')
        a_0 = float( string.split( pwscfOut[key_a_0] )[4] )
        keyEnd = max( qe_io_dict.find_all_keys_from_marker_string(pwscfOut, '!', 'total energy') )
        keyCellPar = qe_io_dict.find_key_from_string_afterkey(pwscfOut, keyEnd, \
                                                       'CELL_PARAMETERS (alat)') + 1
        a =  vectorLength( [ float(valstr) for valstr in string.split( pwscfOut[keyCellPar] ) ] )
        b =  vectorLength( [ float(valstr) for valstr in string.split( pwscfOut[keyCellPar+1] ) ] )
        c =  vectorLength( [ float(valstr) for valstr in string.split( pwscfOut[keyCellPar+2] ) ] )                
        return [a*a_0, b*a_0, c*a_0]
