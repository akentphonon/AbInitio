There are currently some limitations in this simple application.

1. There are only two tables "Job" and "Plot" (qe/models.py). You need
to have already database records available. So the record with id = 1
should be for electrons and record with id=2 should be for phonons.
You can create the record for electrons and phonons by uncommenting
lines:

[views.py]

def edit_electron_params(request):
...
   #job.save()

def edit_phonon_params(request):
...
   #job.save()

and go to Electrons > Edit Parameters and click the button "Save
Parameters" for electrons and similarly for phonons: Phonons > Edit
Parameters.

The records are already stored in the file "espresso". SQLite stores
the whole database in one file :), so to see what's in there just
type:

$ sqlite3 espresso
SQLite version 3.4.2
Enter ".help" for instructions
sqlite> .tables
qe_job   qe_plot
sqlite> select * from qe_job
  ...> ;
1|electron|finished|2009-06-11 13:35:34.081567| &control
   calculation='scf'
   restart_mode='from_scratch',
   tprnfor = .true.
   prefix='ni',
   pseudo_dir = './',
   outdir='temp/'
 /
 &system
   ibrav=2,
   celldm(1) =6.65,
   nat=  1,
   ntyp= 1,
   nspin=2,
   starting_magnetization(1)=0.5,
   degauss=0.02,
   smearing='gauss',
   occupations='smearing',
   ecutwfc =27.0
   ecutrho =300.0
 /
 &electrons
   conv_thr =  1.0d-8
   mixing_beta = 0.7
 /
ATOMIC_SPECIES
 Ni  26.98  Ni.pbe-nd-rrkjus.UPF
ATOMIC_POSITIONS
 Ni 0.00 0.00 0.00
K_POINTS AUTOMATIC
4 4 4 1 1 1

2|phonon|finished|2009-06-11 16:47:52.790506|phonons of Ni at gamma
 &inputph
 tr2_ph=1.0d-16,
 prefix='ni',
 ldisp=.true.,
 nq1=2,
 nq2=2,
 nq3=2,
 amass(1)=58.6934,
 outdir='temp/',
 fildyn='ni.dyn',
 /

sqlite> .quit

2. Currently the forms "Electrons > New Simulation" and "Phonons > New
Simulation" don't actually do anything when you submit them (click on
button "Create Simulation"). To actually create the simulation one
needs to actually add two new database tables: "Electrons" and
"Phonons". In the file qe/models.py just uncomment line with these
classes and create the logic for setting records to these tables.

3. In "Electrons" part, once the records are available in the
database, it reads the configuration from the tables Jobs and runs the
simulation (equivalent to: bin/pw.x < ni.scf.in >ni.scf.out), then
creates ni.scf.dos.out by running equivalent to command: bin/dos.x <
ni.scf.dos.in and finally parsing the file ni.scf.dos.out and plotting
the graph with the matplotlib library. In "Phonons" part there is no
actually simulation running. It just parses the file ni.ph.dos.in and
plots the graph.

This is pretty much all it can do. Though the application is kind of
cripple but it can do basically what we need for web service. I am not
sure if I want to improve it, unless it will be appropriate to use
Django for building VNF.

I have uploaded the source code for Vini to the repository which you
can check out by command:

svn co svn+ssh://svn@danse.us/AbInitio/espresso/vini

Make sure to change some of the configurations in settings.py
